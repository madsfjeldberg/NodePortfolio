<section id="nodejs">
  <h1 class="text-2xl font-bold text-dark-text mb-4">Intro</h1>

  <p class="text-dark-text-secondary mb-4">
    Node.js is a runtime environment for JavaScript that allows you to run
    JavaScript code outside of a web browser. It is built on top of the V8
    JavaScript engine. <br>
    It can be used to create servers, web apps, CLI tools, scripts, and even games.
    <br>
    <br>
    It was created by Ryan Dahl in 2009, and is currently maintained by the Node.js Foundation.

  </p>
</section>
  
<section id="installation">
  <hr class="my-6 border-t border-dark-border mt-8" />
  <h2 class="text-xl font-bold text-dark-text mb-4">Installation</h2>
  <p class="text-dark-text-secondary mb-4">
    Node.js can be installed from the <a class="link" href="https://nodejs.org/en/download/">official website</a>, although it's recommended to use a package manager.
  </p>
  <p class="text-dark-text-secondary mb-4">
    To install Node.js using <a class="link" href="https://github.com/nvm-sh/nvm">nvm</a> (Node Version Manager), run the following command:
  </p>
  <pre class="language-bash">
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
  </pre>
  <p class="text-dark-text-secondary mb-4">
    nvm is a CLI tool that allows foe easy switching and installation of different Node versions. <br>
    Then, to install the latest version of Node.js, run:
  </p>
  <pre class="language-bash">
    nvm install --lts
  </pre>
  <p class="text-dark-text-secondary mb-4">
    Which will install the latest long term support (LTS) version of Node.js.
  </p>
  <p class="text-dark-text-secondary mb-4">
    To check if Node.js is installed, run the following command:
  </p>
  <pre class="language-bash">
node -v // will print something like v22.14.0
npm -v // will print something like 10.9.0
  </pre>
  <p class="text-dark-text-secondary mb-4">
    Node comes with <a class="link" href="https://www.npmjs.com/">npm</a> (Node Package Manager) installed,
    which is very useful for installing and managing packages.
  </p>
</section>

<section id="Hello World">
  <hr class="my-6 border-t border-dark-border mt-8" />
  <h2 class="text-xl font-bold text-dark-text mb-4">Hello World</h2>
  <p class="text-dark-text-secondary mb-4">
    To run JavaScript code using Node, start by creating a new file, ex. <code class="inline">hello.js</code>.
    Then, add the following code to the file:
  </p>
  <pre class="language-javascript">
    console.log("Hello World!");
  </pre>
  <p class="text-dark-text-secondary mb-4">
    Then it can be run with Node through the terminal:
  </p>
  <pre class="language-bash">
    node hello.js // Hello World
  </pre>
  <p class="text-dark-text-secondary mb-4">
    
</section>

<section id="package.json">
  <hr class="my-6 border-t border-dark-border mt-8" />
  <h2 class="text-xl font-bold text-dark-text mb-4">package.json / npm</h2>
  <p class="text-dark-text-secondary mb-4">
    The <code class="inline">package.json</code> file is a JSON file that contains the project's metadata and configuration.
    It also contains the project's dependencies and scripts.
  </p>
  <p class="text-dark-text-secondary mb-4">
    To create a <code class="inline">package.json</code> file, run the following command:
  </p>
  <pre class="language-bash">
    npm init
  </pre>
  <p class="text-dark-text-secondary mb-4">
    or set it up manually by creating a <code class="inline">package.json</code>
  </p>
  <pre class="language-json">
{
  "name": "my-project",
  "version": "1.0.0",
  "description": "My project description",
}
  </pre>
  <p class="text-dark-text-secondary mb-4">
    Then you can install dependencies by running:
  </p>
  <pre class="language-bash">
    npm install express
  </pre>
  <p class="text-dark-text-secondary mb-4">
    This will install the <code class="inline">express</code> package and add it to the <code class="inline">dependencies</code> object in the <code class="inline">package.json</code> file.
  </p>
  <pre class="language-json">
{
  "name": "my-project",
  "version": "1.0.0",
  "description": "My project description",
  "dependencies": {
    "express": "^4.19.2"
  }
}
  </pre>
  <p class="text-dark-text-secondary mb-4">
    You can also add dependencies manually to the <code class="inline">package.json</code> file, just by typing them in, 
    although using the CLI is more efficient, and ensures that the dependencies (and versions of them) are installed correctly.
  </p>

</section>

<section id="node_modules">
  <hr class="my-6 border-t border-dark-border mt-8" />
  <h2 class="text-xl font-bold text-dark-text mb-4">node_modules</h2>
  <p class="text-dark-text-secondary mb-4">
    The <code class="inline">node_modules</code> folder is automatically created when you install dependencies.
  </p>
  <p class="text-dark-text-secondary mb-4">
    It contains all the dependencies for the project, and is not meant to be edited manually. <br>
    It really shouldn't be added to git, as it is very large in size, and will be created automatically when installing dependencies anyway.
  </p>
</section>

<section id="environment variables">
  <hr class="my-6 border-t border-dark-border mt-8" />
  <h2 class="text-xl font-bold text-dark-text mb-4">Environment Variables</h2>
  <p class="text-dark-text-secondary mb-4">
    Environment variables in Node, can be stored in a <code class="inline">.env</code> file, which is a text file that contains key-value pairs.
    To handle them we can either use the dotenv package, or the <code class="inline">--env-file</code> flag.
  </p>
  <p class="text-dark-text-secondary mb-4">
    To use the dotenv package, install it first:
  </p>
  <pre class="language-bash">
    npm install dotenv
  </pre>
  <p class="text-dark-text-secondary mb-4">
    Then, create a <code class="inline">.env</code> file in the root of the project, and add variables, for example:
  </p>
  <pre class="language-bash">
PORT=3000
SECRET_KEY=1234
  </pre>
  <p class="text-dark-text-secondary mb-4">
    Then, in the main file, import the dotenv package and use it to load the variables, using <code class="inline">process.env.VARIABLE_NAME</code>.
  </p>
  <pre class="language-javascript">
import dotenv from 'dotenv';

// Load the variables
dotenv.config();

console.log(process.env.PORT); // 3000
console.log(process.env.SECRET_KEY); // 1234
  </pre>
  
  <p class="text-dark-text-secondary mb-4">
    Since Node v20.6.0, the <code class="inline">--env-file</code> flag can be used to load the variables from a file, instead of implementing <code class="inline">dotenv</code>:
  </p>
  <pre class="language-bash">
    node --env-file=.env test.js
  </pre>
</section>